<?php
namespace Trefoil\Plugins;
use Symfony\Component\Finder\Finder;

use Easybook\Publishers\Epub2Publisher;

use Easybook\Events\EasybookEvents;

use Easybook\Util\Toolkit;

use Easybook\Events\BaseEvent;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Easybook\Events\EasybookEvents as Events;
use Easybook\Events\ParseEvent;

/**
 * plugin to uncompress the generated epub ebook
 *
 */
class EpubUncompressPlugin extends BasePlugin implements EventSubscriberInterface
{

    public static function getSubscribedEvents()
    {
        return array(
                // runs later but before renaming
                EasybookEvents::POST_PUBLISH => array('onPostPublish',-900)
        );
    }

    public function onPostPublish(BaseEvent $event)
    {
        $this->init($event);

        $this->bookUncompress();

        if ($this->getEditionOption('fix_compressed_epub', false)) {
            $this->bookRecompress();
        }
    }

    protected function bookUncompress()
    {
        $outputDir = $this->app['publishing.dir.output'];
        $epubFile = $outputDir . '/book.epub';
        $epubFolder = $epubFile . '.uncompressed';

        if (!file_exists($epubFile)) {
            return;
        }

        // remove the uncompressed ebook directory
        if (file_exists($epubFolder)) {
            $this->app->get('filesystem')->remove($epubFolder);
        }

        $this->app->get('filesystem')->mkdir($epubFolder);

        Toolkit::unzip($epubFile, $epubFolder);
    }

    protected function bookRecompress()
    {
        $outputDir = $this->app['publishing.dir.output'];
        $epubFile = $outputDir . '/book.epub';
        $epubFolder = $epubFile . '.uncompressed';

        if (!is_dir($epubFolder)) {
            return;
        }

        $bookTempDir = $this->app['app.dir.cache'].'/'.uniqid(
                $this->app['publishing.book.slug'].'-'.$this->app['publishing.edition'].'-'.'recompress'.'-'
        );
        $this->app->get('filesystem')->mkdir($bookTempDir);

        // delete empty fonts directory
        $fontsDir = $epubFolder.'/OEBPS/fonts';

        if ($this->app->get('filesystem')->exists($fontsDir)) {
            $count = count(Finder::create()->files()->in($fontsDir));
            if (count(Finder::create()->files()->in($fontsDir)) == 0) {
                $this->app->get('filesystem')->remove($fontsDir);
            }
        }

        $this->zipBookContents($epubFolder, $bookTempDir.'/book.zip');

        $this->app->get('filesystem')->copy(
                $bookTempDir.'/book.zip',
                $this->app['publishing.dir.output'].'/book.epub',
                true
        );

        $this->app->get('filesystem')->remove($bookTempDir);
    }

    /**
     * @see Epub2Publisher::zipBookContents()
     *
     * @param  string $directory  Book contents directory
     * @param  string $zip_file   The path of the generated ZIP file
     */
    private function zipBookContents($directory, $zip_file)
    {
        // After several hours trying to create ZIP files with lots of PHP
        // tools and libraries (Archive_Zip, Pclzip, zetacomponents/archive, ...)
        // I can't produce a proper ZIP file for ebook readers.
        // Therefore, if ZIP extension isn't enabled, the ePub ZIP file is
        // generated by executing 'zip' command

        // check if 'zip' command exists
        $process = new \Symfony\Component\Process\Process('zip');
        $process->run();

        if (!$process->isSuccessful()) {
            throw new \RuntimeException(
                "[ERROR] Your system must be able to execute 'zip' console command.");
        }

        // To generate the ePub file, you must execute the following commands:
        //   $ cd /path/to/ebook/contents
        //   $ zip -X0 book.zip mimetype
        //   $ zip -rX9 book.zip * -x mimetype
        $command = sprintf('cd %s && zip -X0 %s mimetype && zip -rX9 %s * -x mimetype', $directory, $zip_file, $zip_file);

        $process = new \Symfony\Component\Process\Process($command);
        $process->run();

        if (!$process->isSuccessful()) {
            throw new \RuntimeException(
                "[ERROR] 'zip' command execution wasn't successful.\n\n" . "Executed command:\n" . " $command\n\n" . "Result:\n"
                    . $process->getErrorOutput());
        }
    }
}
