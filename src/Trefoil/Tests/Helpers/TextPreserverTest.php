<?php
/*
 * This file is part of the trefoil application.
 *
 * (c) Miguel Angel Gabriel <magabriel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Trefoil\Helpers;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-31 at 09:17:37.
 */
class TextPreserverTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var TextPreserver
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TextPreserver;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Trefoil\Helpers\TextPreserver::setText
     * @covers Trefoil\Helpers\TextPreserver::getText
     */
    public function testNoChange()
    {
        $this->object->setText('Lorem ipsum');
        $this->assertEquals('Lorem ipsum', $this->object->getText());
    }

    /**
     * @covers Trefoil\Helpers\TextPreserver::reserveMarkdownCodeBlocks
     * @covers Trefoil\Helpers\TextPreserver::restore
     */
    public function testPreserveMarkdownCodeBlocks()
    {
        $markdown = <<<TEXT
Lorem ipsum.

~~~
A fenced code block
~~~

Dolor sit amet `{@ an inline code block @}` lorem ipsum.

~~~.php
echo 'A PHP fenced code block';

echo 'With multiple lines';
~~~

~~~.html
{@ tabularlist_begin() @}
    
    ...the markdown list definition
    
{@ tabularlist_end() @}
~~~

~~~ .html
<div>An HTML code block with the language specifier separated from the fence</div>
~~~
            
TEXT;

        $this->object->setText($markdown);
        $this->object->preserveMarkdowmCodeBlocks();

        $this->assertNotContains("~~~", $this->object->getText());
        $this->assertNotContains("`", $this->object->getText());

        $this->object->restore();
        $this->assertEquals($markdown, $this->object->getText());
    }

    /**
     * @covers Trefoil\Helpers\TextPreserver::preserveHtmlTags
     * @covers Trefoil\Helpers\TextPreserver::restore
     */
    public function testPreserveHtmlTags()
    {
        $html = '<div class="myclass">';
        $html .= '<a href="http://example.com/image.gif">Lorem ipsum</a>';
        $html .= '</div>';

        $this->object->setText($html);
        $this->object->preserveHtmlTags(array('a'));

        $this->assertNotContains("Lorem", $this->object->getText());
        $this->assertNotContains("ipsum", $this->object->getText());

        $this->object->restore();
        $this->assertEquals($html, $this->object->getText());
    }

    public function testPreserveHtmlTagsWithEmbeddedTags()
    {
        $html = '<div class="myclass">';
        $html .= '<a href="http://example.com/image.gif">Lorem <span>ipsum</span> dolor</a>';
        $html .= '</div>';

        $this->object->setText($html);
        $this->object->preserveHtmlTags(array('a'));

        $this->assertNotContains("Lorem", $this->object->getText());
        $this->assertNotContains("ipsum", $this->object->getText());
        $this->assertNotContains("dolor", $this->object->getText());
        $this->assertNotContains("span", $this->object->getText());

        $this->object->restore();
        $this->assertEquals($html, $this->object->getText());
    }

    /**
     * @covers Trefoil\Helpers\TextPreserver::preserveHtmlTagAttributes
     * @covers Trefoil\Helpers\TextPreserver::restore
     */
    public function testPreserveHtmlTagAttributes()
    {
        $html = '<div class="myclass">';
        $html .= '<a href="http://example.com/image.gif">Lorem ipsum</a>';
        $html .= '</div>';

        $this->object->setText($html);
        $this->object->preserveHtmlTagAttributes(array('href', 'class'));

        $this->assertNotEquals($html, $this->object->getText());

        $this->object->restore();
        $this->assertEquals($html, $this->object->getText());
    }

    /**
     * @covers Trefoil\Helpers\TextPreserver::internalCreatePlacehoder
     */
    public function testCreatePlacehoder()
    {
        $value = 'myvalue';
        $placeholder = $this->object->internalCreatePlacehoder($value, 'prefix');

        $html = '<div class="myclass">' . $value . '</div>';
        $html2 = str_replace('myvalue', $placeholder, $html);

        $this->object->setText($html2);
        $this->assertEquals($html2, $this->object->getText());

        $this->object->restore();
        $this->assertEquals($html, $this->object->getText());
    }

}
