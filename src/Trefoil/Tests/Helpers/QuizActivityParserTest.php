<?php
declare(strict_types=1);
/*
 * This file is part of the trefoil application.
 *
 * (c) Miguel Angel Gabriel <magabriel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Trefoil\Tests\Helpers;

use Trefoil\Helpers\QuizActivityParser;
use Trefoil\Helpers\QuizActivity;
use Trefoil\Helpers\QuizActivityQuestion;
use Trefoil\Helpers\QuizItem;

use Michelf\MarkdownExtra;
use PHPUnit_Framework_TestCase;
use Symfony\Component\Yaml\Yaml;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-13 at 17:49:11.
 */
class QuizActivityParserTest extends TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {

    }

    /**
     * @throws \Exception
     */
    public function testParseActivityABC(): void
    {
        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-abc.md');
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-abc-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        static::assertEquals($expected, $activity);
    }

    public function testParseActivityYN(): void
    {
        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-yn.md');
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-yn-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        static::assertEquals($expected, $activity);
    }

    public function testParseActivityYNB(): void
    {
        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-ynb.md');
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-ynb-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        static::assertEquals($expected, $activity);
    }

    public function testParseActivityYNBSpanish(): void
    {
        $valid = [
            'yes'  => ['Si', 'Cierto'],
            'no'   => ['No', 'Falso'],
            'both' => ['Ambos', 'Ambas']
        ];

        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-ynb-spanish.md', $valid);
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-ynb-spanish-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        static::assertEquals($expected, $activity);
    }

    /**
     * @param      $mdFile
     * @param null $valid
     * @return QuizItem
     * @throws \Exception
     */
    protected function loadFixture($mdFile, $valid = null): QuizItem
    {
        $fixture = file_get_contents($mdFile);
        $markdown = new MarkdownExtra();
        $text = $markdown->transform($fixture);

        $parser = new QuizActivityParser($text);

        if ($valid) {
            $parser->setResponsesValidAsYes($valid['yes']);
            $parser->setResponsesValidAsNo($valid['no']);
            $parser->setResponsesValidAsBoth($valid['both']);
        }

        return $parser->parse();
    }

    /**
     * @param $ymlFile
     * @return QuizActivity
     */
    protected function loadExpected($ymlFile): QuizActivity
    {
        $yml = Yaml::parse(file_get_contents($ymlFile));

        /** @var array[][] $activity */
        $activity = $yml['activity'];

        $expected = new QuizActivity();
        $expected->setId($activity['id']);
        $expected->setType($activity['type']);
        $expected->setOptions($activity['options']);
        $expected->setHeading($activity['heading']);
        $expected->setSubHeading($activity['subheading']);
        $expected->setIntroduction($this->clean($activity['introduction']));

        $questions = [];
        foreach ($activity['questions'] as $question) {
            $questionObj = new QuizActivityQuestion();
            $questionObj->setText($question['text']);
            $questionObj->setSolution($question['solution']);

            $responses = [];
            /** @var string[][] $question */
            foreach ($question['responses'] as $response) {
                $responses[] = $this->clean($response);
            }
            $questionObj->setResponses($responses);

            $explanations = [];
            foreach ($question['explanations'] as $explanation) {
                $explanations[] = $this->clean($explanation);
            }
            $questionObj->setExplanations($explanations);

            $questions[] = $questionObj;
        }

        $expected->setQuestions($questions);

        return $expected;
    }

    /**
     * @param $string
     * @return mixed|null
     */
    protected function clean($string)
    {
        if (null === $string) {
            return null;
        }

        return str_replace(['> <', "\n"], ['><', ''], $string);
    }
}
