<?php

namespace Trefoil\Helpers;

use Michelf\MarkdownExtra;
use PHPUnit_Framework_TestCase;
use Symfony\Component\Yaml\Yaml;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-13 at 17:49:11.
 */
class QuizActivityParserTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Trefoil\Helpers\ActivitiesParser::parse
     */
    public function testParseActivityABC()
    {
        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-abc.md');
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-abc-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        $this->assertEquals($expected, $activity);
    }

    /**
     * @covers Trefoil\Helpers\ActivitiesParser::parse
     */
    public function testParseActivityYN()
    {
        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-yn.md');
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-yn-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        $this->assertEquals($expected, $activity);
    }

    /**
     * @covers Trefoil\Helpers\ActivitiesParser::parse
     */
    public function testParseActivityYNB()
    {
        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-ynb.md');
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-ynb-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        $this->assertEquals($expected, $activity);
    }

    /**
     * @covers Trefoil\Helpers\ActivitiesParser::parse
     */
    public function testParseActivityYNBSpanish()
    {
        $valid = array(
            'yes'  => array('Si', 'Cierto'),
            'no'   => array('No', 'Falso'),
            'both' => array('Ambos', 'Ambas')
        );

        $activity = $this->loadFixture(__DIR__ . '/fixtures/quiz-activity-ynb-spanish.md', $valid);
        $expected = $this->loadExpected(__DIR__ . '/fixtures/quiz-activity-ynb-spanish-expected.yml');

        // internal id is calculated as a hash from source and cannot be predicted
        $expected->setInternalId($activity->getInternalId());

        $this->assertEquals($expected, $activity);
    }

    protected function loadFixture($mdFile, $valid = null)
    {
        $fixture = file_get_contents($mdFile);
        $markdown = new MarkdownExtra();
        $text = $markdown->transform($fixture);

        $parser = new QuizActivityParser($text);

        if ($valid) {
            $parser->setResponsesValidAsYes($valid['yes']);
            $parser->setResponsesValidAsNo($valid['no']);
            $parser->setResponsesValidAsBoth($valid['both']);
        }

        $activity = $parser->parse();

        return $activity;
    }

    protected function loadExpected($ymlFile)
    {
        $yml = Yaml::parse(file_get_contents($ymlFile));

        $activity = $yml['activity'];

        $expected = new QuizActivity();
        $expected->setId($activity['id']);
        $expected->setType($activity['type']);
        $expected->setOptions($activity['options']);
        $expected->setHeading($activity['heading']);
        $expected->setSubHeading($activity['subheading']);
        $expected->setIntroduction($this->clean($activity['introduction']));

        $questions = array();
        foreach ($activity['questions'] as $question) {
            $questionObj = new QuizActivityQuestion();
            $questionObj->setText($question['text']);
            $questionObj->setSolution($question['solution']);

            $responses = array();
            foreach ($question['responses'] as $response) {
                $responses[] = $this->clean($response);
            }
            $questionObj->setResponses($responses);

            $explanations = array();
            foreach ($question['explanations'] as $explanation) {
                $explanations[] = $this->clean($explanation);
            }
            $questionObj->setExplanations($explanations);

            $questions[] = $questionObj;
        }

        $expected->setQuestions($questions);

        return $expected;
    }

    protected function clean($string)
    {
        if (null === $string) {
            return null;
        }

        return str_replace(array('> <', "\n"), array('><', ''), $string);
    }
}
